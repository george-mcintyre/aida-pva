							11-Nov-2002
							Robert C. Sass

This is the directory that contains the SLC data provider code in the New 
Labour format. The following assumptions are made:

1)It has been created in the [.edu.stanford.slac.aida.dp.dpslc] directory 
  hierarchy.
2) The VMS CLASSPATH definition includes all necessary Aida, Corba (now
Orbacus) and Oracle jar/zip files.

The file makefile.vms is a .com file that when executed (@makefile.vms) deletes
old .class and other created files, recompiles all java, creates a new jni
file and finally links and defines a process logical for the aidashr.exe 
shareable.

Files:
------

All the .java files are boilerplate or helper files except for DpSlcI_impl.java
which is where your java code goes. Dpslc_jni.c is the top level set of C
routines called from DpSlcI_impl.java. DpSlcI_impl.c includes dpslci_impl.h 
which is generated by javah against the DpSlcI_impl class file. Look in 
makefile.vms to see how it's done. 

Now dpslc_jni.c must be compiled with a specific set of options for the jni
requirements. All SLC entry names are really uppercase which is incompatible
with Java's case sensitivity so the real interface to the SLC shareables is in
dpslc_jni_helper.c which is compiled with cmp. SLC routine references in 
dpslc_jni.c are made as as uppercase externals to entries in 
dpslc_jni_helper.c where the actual call into the SLC shareable is made.   

Here are the relationships:

DpSlcI_impl.java -> javac -> DpSlcI_impl.class -> javah -> dpslci...jni.h -> 
included in -> dpslc_jni.c -> calls -> dpslc_jni_helper.c -> both .c files ->
link -> aidashr -> VMS shareables.
 
How to develop:
---------------

At this time CVS is unavailable on VMS so you must cvs checkout on UNIX, 
ftp copy any changed files from VMS and cvs update from UNIX. The VMS java
implementation mostly doesn't care about filename case but ftp gives you the
opportunity to change the name into it's proper upper/lower case form to match
the class name so please do so for consistency.

1) Create the usual 43 layers of Aida directory structure in your account down
to dpSlc. [joe.mydev.package.aida.edu.stanford.slac.aida.dp.dpslc] (whew!).
2) Also create the [joe.mydev.package.aida.common.script] directory.
3) Position to the [...common.scrip] directory and ftp the ascii file 
startdpslc.vms from the common/script directory.
4) Position to the [...dpSlc] directory and ftp in ascii all the files from 
the dp/dpSlc directory.
5) from within [...dpslc] do @makefile.vms. This should build the production
SLC server on VMS.
6) Position to [...common.script] and do @startdpslc which starts the SLC data
provider.
7) Test.
8) Modify DpSlcI_impl.java, dpslc_jni.c and dpslc_jni_helper.c as needed, do
@makefile.vms and test again.

