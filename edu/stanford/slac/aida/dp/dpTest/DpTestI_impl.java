// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// Mod:
//   12-Nov-2002, Ron MacKenzie
//     Change import of except from aida to package except
//
// **********************************************************************

// Version: 4.1.0

package edu.stanford.slac.aida.dp.dpTest;

import java.util.*;	// for StringTokenizer
import org.omg.CORBA.*;
import org.omg.PortableServer.*;
import edu.stanford.slac.except.*;
import edu.stanford.slac.err.*;
import edu.stanford.slac.aida.lib.util.common.*;

//
// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI:1.0
//
/**
 * Implements the DpTest server (the Data Provider named "Test" in the
 * Aida Directory Service.
 * @author Greg White
 * @version 28-Sep-2006, Bob Hall (rdh): Added args parameter to set method.
 * @version 15-Sep-2004, Greg White (greg): Change for Err singleton.
 * @version 14-Sep-2004, Greg White (greg): Change error pattern; make determination
 * of number of passed parameters (args arg) to get() more robust. Reformat.
 */
public class DpTestI_impl extends DpTestIPOA {

	private POA poa_;                  // Not used by this dpTest
	private _PersistentDaObject m_da;  // Not used by dpTest, but in signature
	// of constructor because other data
	// provider implementations may want
	// things in DaObject, such as an ORB
	// instance.
      	private static int stat = 0;       // 0 when server is just started, 1 after 1st call.
	private final boolean DEBUG = false;
	// Whether to print debugging info.
    	private static Err err;            // Error handling API. 
                                               
    
	public DpTestI_impl(_PersistentDaObject da, POA poa) 
	{
		m_da = da;
		poa_ = poa;
		err = Err.getInstance();   // Get Err issuance singleton 
	}
    
	public POA
	_default_POA() 
	{
		if(poa_ != null)
			return poa_;
		else
			return super._default_POA();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/init:1.0
	//
	public void
	init()
		throws ServerInitialisationException 
	{
		// TODO: implement
	}
    
	/**
	 * Static Test data returned by dpTest
	 */
	private String timeList [] = {
		"2001-09-06 12:02:22",
		"2001-09-06 12:03:42",
		"2001-09-06 12:04:23",
		"2001-09-06 12:05:33",
		"2001-09-06 12:06:54",
		"2001-09-06 12:06:22",
		"2001-09-06 12:07:56",
		"2001-09-06 12:09:22",
		"2001-09-06 12:10:23",
		"2001-09-06 12:11:46",
		"2001-09-06 12:14:23"
	};
	private double valueList [] = {
		1232.3434,
		1233.0121,
		1212.3234,
		1255.7565,
		1455.7454,
		1343.0923,
		1232.4656,
		1233.4544,
		1234.6565,
		1223.3434,
		1201.2323
	};
    
	/**
	 * Prints information about the data provider method call which was invoked,
	 * useful for debugging. This method should be invoked by each public data
	 * access method only if static constant DEBUG is true.
	 */
	private void
	DOut(String returnType, String theTarget, String[] theArgs) {
		System.out.print("dpTest: " + returnType + " get" + 
				 ((returnType.compareTo("Any")==0)? "" : 
				  ("_"+returnType)) + "(target='" + theTarget + "', args[");
		for (int i=0; i < theArgs.length ; i++)
			System.out.print(i + "='" + theArgs[i] + 
					 (((i+1)<theArgs.length)?"', ":"'"));
		System.out.println("])");
		return;
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get:1.0
	//
	public Any
	get(String target,
	    String[] args)
		throws UnableToGetDataException 
	{        
		if (DEBUG) DOut("Any", target, args); // Debug
        
		int i;

		// nArgs is the effective number of of parameters. The AIDA
		// CORBA API results in at least 1 arg always, because the AidaObject
		// API does not define versions of each API method with a no-args arg,
		// so AIDA must supply at least 1 args arg, but args[0] to "null". 
		int nArgs = ( (args[0].compareTo("null")==0) ? 0 : args.length );
        
		// This is the return object, this could also be a CORBA Any
		DaValue ret = new DaValue();
		ret.type = DaValue.Type.STRUCT;
        
		try {
			// Extract context information from given parameters
			String startTime = null, endTime = null;
			for (i=0; i< nArgs ; i+=2 ) {
				if (args[i].equalsIgnoreCase("STARTTIME") )
					startTime = args[i+1];
				else if (args[i].equalsIgnoreCase("ENDTIME") )
					endTime = args[i+1];
			}
            
			// If no parameters specified then return unconstrained results
			if ( nArgs == 0 ) {
                
				DaValue times = new DaValue(timeList);
				DaValue values = new DaValue(valueList);
				times.type = DaValue.Type.STRINGA;
				values.type = DaValue.Type.DOUBLEA;
				ret.addElement(times);
				ret.addElement(values);
			}
			else {
				// Otherwise return data that matches parameters
				DaValue times = new DaValue();
				times.clear();
				DaValue values= new DaValue();
				values.clear();
				times.type = DaValue.Type.STRINGA;
				values.type = DaValue.Type.DOUBLEA;
                
				for ( i = 0 ; 
				      (i < timeList.length) && (i < valueList.length) ; 
				      i++ ) 
				{
					if ( (( startTime == null) || 
					      (startTime.compareTo(timeList[i]) <= 0)) &&
					     (( endTime == null) || 
					      (endTime.compareTo(timeList[i]) >= 0 )) ) 
					{
						times.addElement(timeList[i]);
						values.addElement(new Double(valueList[i]));
					}
				}
				ret.addElement(times);
				ret.addElement(values);
			}
            
		}
		catch ( Exception ex ) {
			UnableToGetDataException he = new UnableToGetDataException(
				this.getClass().toString() + " caught " + ex.toString() );
			throw (UnableToGetDataException) err.log(he, "when getting " + target );
		}
		return (ret.toAny());
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_byte:1.0
	//
	public byte
	get_byte(String target,
		 String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("byte", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_short:1.0
	//
	public short
	get_short(String target,
		  String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("short", target, args); // Debug
		short secs = 20;
		
		System.out.println( "Enter get_short for " + target + " at " +
				  java.util.Calendar.getInstance().getTime());
		System.out.println("sleeping "+secs+" seconds");
		try {
			Thread.sleep(1000*secs);
		} catch ( Exception e )
		{
			throw new UnableToGetDataException(e.getMessage());
		}
		System.out.println( "Exit get_short for " + target + " at " + 
				  java.util.Calendar.getInstance().getTime()); 

		return secs;
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_long:1.0
	//
	public int
	get_long(String target,
		 String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("long", target, args); // Debug
		return (56789);
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_boolean:1.0
	//
	public boolean
	get_boolean(String target,
		    String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("boolean", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_double:1.0
	//
	public double
	get_double(String target,
		   String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("double", target, args); // Debug
		return (567.89F);
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_float:1.0
	//
	public float
	get_float(String target,
		  String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("float", target, args); // Debug
        
		return (123.456F);
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_string:1.0
	//
	public String
	get_string(String target,
		   String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("string", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_char:1.0
	//
	public char
	get_char(String target,
		 String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("char", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_wstring:1.0
	//
	public String
	get_wstring(String target,
		    String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("wstring", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_wchar:1.0
	//
	public char
	get_wchar(String target,
		  String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("wchar", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_bytea:1.0
	//
	public byte[]
	get_bytea(String target,
		  String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("bytea", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_shorta:1.0
	//
	public short[]
	get_shorta(String target,
		   String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("shorta", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_longa:1.0
	//
	public int[]
	get_longa(String target,
		  String[] args)
		throws UnableToGetDataException 
	{
		int size;
		if (DEBUG) DOut("longa", target, args); // Debug
		if (args[0].equalsIgnoreCase("SIZE") )
			size = Integer.parseInt(args[1]);
		else
			size = 2;
		int intarray [] =  new int[size];
		return (intarray);   
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_booleana:1.0
	//
	public boolean[]
	get_booleana(String target,
		     String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("booleana", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_doublea:1.0
	//
	public double[]
	get_doublea(String target,
		    String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("doublea", target, args); // Debug
       
		int i;
        
		// Extract context information from given parameters
		int nArgs = ( (args[0].compareTo("null")==0) ? 0 : args.length );
		String startTime = null, endTime = null;
		for (i=0; i< nArgs ; i+=2 ) {
			if (args[i].equalsIgnoreCase("STARTTIME") )
				startTime = args[i+1];
			else if (args[i].equalsIgnoreCase("ENDTIME") )
				endTime = args[i+1];
		}
        
		// If no parameters specified then return unconstrained results
		if ( startTime == null && endTime == null ) {
			return(valueList);
		}
		else {
			// Otherwise return data that matches parameters
			Vector values= new Vector();
            
			for ( i = 0 ; (i < timeList.length) && (i < valueList.length) ; i++ ) {
				if ( (( startTime == null) || 
				      (startTime.compareTo(timeList[i]) <= 0)) &&
				     (( endTime == null) || 
				      (endTime.compareTo(timeList[i]) >= 0 )) )
					values.addElement(new Double(valueList[i]));
			}
            
			// Create restricted output array
			double [] ret = new double[values.size()];
            
			for ( i = 0 ; i < values.size() ; i++ )
				ret[i] = ((Double)values.elementAt(i)).doubleValue();
            
			// Return data
			return (ret);
		}
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_floata:1.0
	//
	public float[]
	get_floata(String target,
		   String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("floata", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_stringa:1.0
	//
	public String[]
	get_stringa(String target,
		    String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("stringa", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_chara:1.0
	//
	public char[]
	get_chara(String target,
		  String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("chara", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/get_wchara:1.0
	//
	public char[]
	get_wchara(String target,
		   String[] args)
		throws UnableToGetDataException {
		if (DEBUG) DOut("wchara", target, args); // Debug
        
		throw new UnableToGetDataException();
	}
    
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/set:1.0
	//
	public void
	set(String target,
            String[] args,
	    AnyHolder value)
		throws UnableToSetDataException {
		// TODO: implement
		ORB orb = ORB.init();
		value.value = orb.create_any();
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/startMonitor:1.0
	//
	public void
	startMonitor(String name)
		throws MonitorStartupException {
		// TODO: implement
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/stopMonitor:1.0
	//
	public void
	stopMonitor(String name)
		throws MonitorShutdownException {
		// TODO: implement
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/status:1.0
	//
	public int
	status() {
		// TODO: implement
		int _r = 0;
		stat = 1;
		return _r;
	}
    
	//
	// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestI/shutdown:1.0
	//
	public void
	shutdown() {
		// TODO: implement
	}
}
