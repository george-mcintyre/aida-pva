// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// Mod:
//   06-Aug-2008, Bob Hall
//     Added isdstList to be consistent with dpChads.
//   09-Oct-2007, Bob Hall
//     Added unixtimeList, pulseidList, and countList to be
//     consistent with dpChads.
//   18-Feb-2003, Ron MacKenzie
//     Return repeat count in get any.
//   12-Nov-2002, Ron MacKenzie
//     Change import of except from aida to package except
//   
// **********************************************************************

// Version: 4.1.0

package edu.stanford.slac.aida.dp.dpTestHist;


import java.util.*;	// for StringTokenizer
import	org.omg.CORBA.*;
import	org.omg.PortableServer.*;
import	edu.stanford.slac.aida.lib.util.common.*;
import edu.stanford.slac.err.Err;
import	edu.stanford.slac.except.*;

//
// IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI:1.0
//
/**
 * The CORBA servant implementation of the <code>DpTestHist</code> server. 
 * The purpose of this servant is to demonstrate a Java implementation of an
 * AIDA data provider servant which returns data through a bespoke IDL structure (in this 
 * example <em>histdata</em>).
 * @author Greg White Jan-2004.
 * @version 28-Sep-2006, Bob Hall (rdh): Added args parameter to set method.
 * @version 16-Sep-2004, Greg White (greg): Convert for Err singleton re-write.
 */
public class DpTestHistI_impl extends DpTestHistIPOA
{
    static Err err;                    // Error issuance singleton.
    private static int stat = 0;       // 0 when server is just started,

    private POA poa_;                  // Not used by this server yet
    private _PersistentDaObject m_da;  // Not used by dpTestHist,
    // but in signature
    // of constructor because other data provider implementations
    // may want things in DaObject, such as an ORB instance.

    // 1 after first call to status() method.
    private final boolean DEBUG = false;     

    
    public DpTestHistI_impl(_PersistentDaObject da, POA poa)
    {
	m_da = da;
	poa_ = poa;
	err = Err.getInstance();
    }
    
    public POA
	_default_POA()
    {
	if(poa_ != null)
	    return poa_;
	else
	    return super._default_POA();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/init:1.0
    //
    public void
	init()
	throws ServerInitialisationException
    {
	// TODO: implement
    }
    
    /**
     * METHODS TO BE MANUALLY IMPLEMENTED IN EACH SERVER
     */
    
    /**
     * REGULAR INTERFACE METHODS defined in IDL
     */
    
    private String timeList [] =
    {
	"2003-09-06 12:02:22",
	"2003-09-06 12:03:42",
	"2003-09-06 12:04:23",
	"2003-09-06 12:05:33",
	"2003-09-06 12:06:54",
	"2003-09-06 12:06:22",
	"2003-09-06 12:07:56",
	"2003-09-06 12:09:22",
	"2003-09-06 12:10:23",
	"2003-09-06 12:11:46",
	"2003-09-06 12:14:23"
    };
    
    private double valueList [] =
    {
	1232.3434,
	1233.0121,
	1212.3234,
	1255.7565,
	1455.7454,
	1343.0923,
	1232.4656,
	1233.4544,
	1234.6565,
	1223.3434,
	1201.2323
    };
    private int repCntList [] =
    {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11
    };
    private int unixtimeList [] =
    {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11
    };
    private int pulseidList [] =
    {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11
    };
    private int countList [] =
    {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11
    };

    private int isdstList [] =
    {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11
    };

    /**
     * Prints information about the data provider method call which was invoked,
     * useful for debugging. This method should be invoked by each public data
     * access method only if static constant DEBUG is true.
     */ 
    private void
	DOut(String returnType, String theTarget, String[] theArgs)
    {
	System.out.print("dpTest: " + returnType + " get" + ((returnType.compareTo("Any")==0)?"":("_"+returnType)) + "(target='" + theTarget + "', args[");
	for (int i=0; i < theArgs.length ; i++)
	    System.out.print(i + "='" + theArgs[i] + (((i+1)<theArgs.length)?"', ":"'"));
	System.out.println("])");
	return;
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get:1.0
    //
    public Any
	get(String target,
	    String[] args)
	throws UnableToGetDataException
    {
	if (DEBUG) DOut("Any", target, args); // Debug
	int i=0; // general index
	Any a = m_da.m_orb.create_any();
        
	// nArgs is the effective number of of parameters. The AIDA
	// CORBA API results in at least 1 arg always, because the AidaObject
	// API does not define versions of each API method with no args arg,
	// so CORBA must supply the args arg, but set it to null. That is
	// args[0]==null means no parameters were given to the AIDA API method.
	int nArgs = ( (args[0]==null) ? 0 : args.length );
        
	try {
	    // Extract context information from given parameters
	    String startTime = null, endTime = null;
	    for (i=0; i< nArgs ; i+=2 ) {
		if (args[i].equalsIgnoreCase("STARTTIME") )
		    startTime = args[i+1];
		else if (args[i].equalsIgnoreCase("ENDTIME") )
		    endTime = args[i+1];
	    }
            
	    // If no parameters specified then return unconstrained results
	    if ( nArgs == 0 ) 
		{
		    histData f = new histData(valueList, timeList, repCntList,
                        unixtimeList, pulseidList, countList, isdstList);
		    histDataHelper.insert(a, f);
		}
	    else
		{
		    int len=0;
		    int st=-1;

		    for ( i = 0 ; (i < timeList.length) && (i < valueList.length) ; i++ ) {
			if ( (( startTime == null) || (startTime.compareTo(timeList[i]) <= 0)) &&
			     (( endTime == null) || (endTime.compareTo(timeList[i]) >= 0 )) ) {
			    if (st == -1) st=i;
			    len++;
			}
		    }
		    double[] values = new double[len];
		    String[] times = new String[len];
		    int[] repCnt = new int[len];
		    int[] unixtimes = new int[len];
		    int[] pulseids = new int[len];
		    int[] counts = new int[len];
		    int[] isdsts = new int[len];

		    for (i=0;i<len;i++)
			{
			    values[i]=valueList[st+i];
			    times[i]=timeList[st+i];
			    repCnt[i]=repCntList[st+i];
			    unixtimes[i]=unixtimeList[st+i];
			    pulseids[i]=repCntList[st+i];
			    counts[i]=repCntList[st+i];
			    isdsts[i]=repCntList[st+i];
			}
		    histData f = new histData(values, times, repCnt, unixtimes, pulseids, counts, isdsts);
		    histDataHelper.insert(a, f);
		}
	}
	catch ( Exception ex ) 
	    {
		UnableToGetDataException he = new UnableToGetDataException(
									   this.getClass().toString() + " caught " + ex.toString() );
		throw (UnableToGetDataException) err.log(he, "when getting " + target );
	    }
	return (a);
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_byte:1.0
    //
    public byte
	get_byte(String target,
		 String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_short:1.0
    //
    public short
	get_short(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_long:1.0
    //
    public int
	get_long(String target,
		 String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_boolean:1.0
    //
    public boolean
	get_boolean(String target,
		    String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_double:1.0
    //
    public double
	get_double(String target,
		   String[] args)
	throws UnableToGetDataException
    {
	// Just return some constant to show we got here and can return.
	return (567.89F);
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_float:1.0
    //
    public float
	get_float(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	return (123.456F);
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_string:1.0
    //
    public String
	get_string(String target,
		   String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_char:1.0
    //
    public char
	get_char(String target,
		 String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_wstring:1.0
    //
    public String
	get_wstring(String target,
		    String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_wchar:1.0
    //
    public char
	get_wchar(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_bytea:1.0
    //
    public byte[]
	get_bytea(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_shorta:1.0
    //
    public short[]
	get_shorta(String target,
		   String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_longa:1.0
    //
    public int[]
	get_longa(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_booleana:1.0
    //
    public boolean[]
	get_booleana(String target,
		     String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_doublea:1.0
    //
    public double[]
	get_doublea(String target,
		    String[] args)
	throws UnableToGetDataException
    {
        
	int i;
	
	if (DEBUG) DOut("Any", target, args); // Debug
        
	// Extract context information from given parameters
	String startTime = null, endTime = null;
	for (i=0; i< args.length ; i+=2 )
	    {
		if (args[i].equalsIgnoreCase("STARTTIME") )
		    startTime = args[i+1];
		else if (args[i].equalsIgnoreCase("ENDTIME") )
		    endTime = args[i+1];
	    }
	
	// If no parameters specified then return unconstrained results
	if ( startTime == null && endTime == null )
	    {
		return(valueList);
	    }
	else
	    {
		// Otherwise return data that matches parameters
		Vector values= new Vector();
	    
		for ( i = 0 ; (i < timeList.length) && (i < valueList.length) ; i++ )
		    {
			if ( (( startTime == null) || (startTime.compareTo(timeList[i]) <= 0)) &&
			     (( endTime == null) || (endTime.compareTo(timeList[i]) >= 0 )) )
			    values.addElement(new Double(valueList[i]));
		    }
	    
		// Create restricted output array
		double [] ret = new double[values.size()];
	    
		for ( i = 0 ; i < values.size() ; i++ )
		    ret[i] = ((Double)values.elementAt(i)).doubleValue();

		// Return data
		return (ret);
	    }
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_floata:1.0
    //
    public float[]
	get_floata(String target,
		   String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_stringa:1.0
    //
    public String[]
	get_stringa(String target,
		    String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_chara:1.0
    //
    public char[]
	get_chara(String target,
		  String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/get_wchara:1.0
    //
    public char[]
	get_wchara(String target,
		   String[] args)
	throws UnableToGetDataException
    {
	throw new UnableToGetDataException();
    }
    
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/set:1.0
    //
    public void
	set(String target,
            String[] args,
	    AnyHolder value)
	throws UnableToSetDataException
    {
	// TODO: implement
	ORB orb = ORB.init();
	value.value = orb.create_any();
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/startMonitor:1.0
    //
    public void
	startMonitor(String name)
	throws MonitorStartupException
    {
	// TODO: implement
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/stopMonitor:1.0
    //
    public void
	stopMonitor(String name)
	throws MonitorShutdownException
    {
	// TODO: implement
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/status:1.0
    //
    public int
	status()
    {
	// TODO: implement
	int _r = 0;
	return _r;
    }
    
    //
    // IDL:dp.aida.slac.stanford.edu/dpTest/DpTestHistI/shutdown:1.0
    //
    public void
	shutdown()
    {
	// TODO: implement
    }
}
