#ifndef THIS_idl
#define THIS_idl
/**
 * IDL for Aida Data Servers
 * This is used to create the DaServer and all other DPxxxxServers
 *
 * The single stubs that are generated by compilation of this IDL are used
 * to access the named object implementation skeletons created from copies of the
 * skeletons produced here.
 * 
 * The implementation will provide startup routines that will start a shared
 * instance of the object and will upon initialisation share its Object Reference
 * in a string form with the DaServer ( a distinguished aidaObject ).
 * 
 * Clients make a connection to the DaServer via the local stubs and contrived
 * skeletons in the DaServe implementation.
 *
 * The DaServer in response to client requests will instantiate a class that 
 * holds the callable interface(s) to the aidaObject(s) that can handle the request.
 * The classes all implement the same interface.  They are instantiated using
 * their IOR proviosly stored in the database by the DaNameServer when the service
 * initialised.
 * @version 28-Sep-2006, Bob Hall.  Added args parameter to the "set" method.
 * @version 07-Jul-2002, George McIntyre. Initial release
 */
#include "OB/Types.idl"
#include "except.idl"

#pragma prefix "lib.aida.slac.stanford.edu"

module dp
{   
    interface AidaObjectI
    {
        void init() raises (except::ServerInitialisationException) ;

        any get(in string target, in CORBA::StringSeq args) raises (except::UnableToGetDataException) ;

        octet get_byte( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        short get_short( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        long get_long( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        boolean get_boolean( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        double get_double( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        float get_float( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        string get_string( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        char get_char( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        wstring get_wstring( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        wchar get_wchar( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;

        CORBA::OctetSeq get_bytea( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::ShortSeq get_shorta( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::LongSeq get_longa( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::BooleanSeq get_booleana( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::DoubleSeq get_doublea( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::FloatSeq get_floata( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::StringSeq  get_stringa( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::CharSeq get_chara( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;
        CORBA::WCharSeq get_wchara( in string target, in CORBA::StringSeq args ) raises (except::UnableToGetDataException) ;

        void set(in string target, in CORBA::StringSeq args, inout any value) raises (except::UnableToSetDataException) ;

        void startMonitor (in string name) raises (except::MonitorStartupException) ;
        void stopMonitor  (in string name) raises (except::MonitorShutdownException);

        long status();      // Get server's status

        void shutdown();    // Shutdown server
    };
};
#endif
